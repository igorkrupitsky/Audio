<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mobile Audio Player</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            padding: 20px;
            background: #f0f2f5;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
        }

        .audio-player {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 20px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
            max-width: 400px;
            margin: 0 auto;
        }

        .play-btn {
            width: 60px;
            height: 60px;
            border: none;
            border-radius: 50%;
            background: #1877f2;
            color: white;
            font-size: 24px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.2s ease;
            min-width: 44px;
            min-height: 44px;
        }

        .play-btn:hover {
            background: #166fe5;
        }

        .play-btn:active {
            transform: scale(0.95);
        }

        .controls-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .progress-container {
            height: 44px;
            display: flex;
            align-items: center;
            cursor: pointer;
            background: #e0e0e0;
            border-radius: 22px;
            padding: 0 10px;
            flex: 1;
        }

        .progress-bar {
            height: 6px;
            background: #1877f2;
            border-radius: 3px;
            width: 0%;
            transition: width 0.1s ease;
        }

        .time-display {
            font-size: 14px;
            color: #666;
            text-align: center;
            flex-shrink: 0;
        }

        .volume-container {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .volume-btn {
            width: 44px;
            height: 44px;
            border: none;
            background: none;
            font-size: 18px;
            cursor: pointer;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .volume-btn:hover {
            background: #e0e0e0;
        }
    </style>
</head>
<body>
    <div class="audio-player">
        <audio id="myAudio" preload="none">
            <source src="Russian/–î–µ—Ç–∏ –•–∞–Ω–Ω—ã/001 –í–≤–µ–¥–µ–Ω–∏–µ.mp3" type="audio/mp3">
            Your browser does not support the audio element.
        </audio>
        
        <button class="play-btn" id="playBtn" onclick="togglePlay()">
            ‚ñ∂Ô∏è
        </button>
        
        <div class="controls-container">
            <div class="progress-container" onclick="setProgress(event)">
                <div class="progress-bar" id="progressBar"></div>
            </div>
            <div class="time-display" id="timeDisplay">0:00 / 0:00</div>
        </div>
        
        <button class="volume-btn" onclick="toggleMute()">
            üîä
        </button>
    </div>

    <script>
        const audio = document.getElementById('myAudio');
        const playBtn = document.getElementById('playBtn');
        const progressBar = document.getElementById('progressBar');
        const timeDisplay = document.getElementById('timeDisplay');
        let isPlaying = false;

        function togglePlay() {
            if (isPlaying) {
                audio.pause();
                playBtn.innerHTML = '‚ñ∂Ô∏è';
                isPlaying = false;
            } else {
                audio.play().then(() => {
                    playBtn.innerHTML = '‚è∏Ô∏è';
                    isPlaying = true;
                }).catch(error => {
                    console.log('Playback failed:', error);
                });
            }
        }

        function toggleMute() {
            const volumeBtn = event.target;
            if (audio.muted) {
                audio.muted = false;
                volumeBtn.innerHTML = 'üîä';
            } else {
                audio.muted = true;
                volumeBtn.innerHTML = 'üîá';
            }
        }

        function setProgress(event) {
            const progressContainer = event.currentTarget;
            const rect = progressContainer.getBoundingClientRect();
            const clickX = event.clientX - rect.left;
            const width = rect.width;
            const percentage = clickX / width;
            
            if (audio.duration) {
                audio.currentTime = percentage * audio.duration;
            }
        }

        function formatTime(seconds) {
            const mins = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${mins}:${secs.toString().padStart(2, '0')}`;
        }

        // Update progress bar and time display
        audio.addEventListener('timeupdate', () => {
            if (audio.duration) {
                const percentage = (audio.currentTime / audio.duration) * 100;
                progressBar.style.width = percentage + '%';
                
                const currentTime = formatTime(audio.currentTime);
                const duration = formatTime(audio.duration);
                timeDisplay.textContent = `${currentTime} / ${duration}`;
            }
        });

        // Handle when audio ends
        audio.addEventListener('ended', () => {
            playBtn.innerHTML = '‚ñ∂Ô∏è';
            isPlaying = false;
            progressBar.style.width = '0%';
        });

        // Handle loading
        audio.addEventListener('loadedmetadata', () => {
            const duration = formatTime(audio.duration);
            timeDisplay.textContent = `0:00 / ${duration}`;
        });

        // Handle errors
        audio.addEventListener('error', (e) => {
            console.log('Audio error:', e);
            playBtn.innerHTML = '‚ùå';
        });
    </script>
</body>
</html>